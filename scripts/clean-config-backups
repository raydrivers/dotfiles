#!/bin/bash

# Clean backup files created by dotfiles setup
# Removes backup files with timestamp pattern *.backup.YYYYMMDD_HHMMSS

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default directory to clean
DEFAULT_DIR="$HOME/.config"

# Function to show usage
show_usage() {
    echo "Usage: $0 [directory]"
    echo "  directory: Directory to clean backups from (default: ~/.config)"
    echo ""
    echo "This script removes backup files with pattern: *.backup.YYYYMMDD_HHMMSS"
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    echo "  -n, --dry-run Show what would be deleted without actually deleting"
}

# Parse arguments
DRY_RUN=false
TARGET_DIR="$DEFAULT_DIR"

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -n|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -*)
            echo -e "${RED}Error: Unknown option $1${NC}"
            show_usage
            exit 1
            ;;
        *)
            TARGET_DIR="$1"
            shift
            ;;
    esac
done

# Expand tilde in path
TARGET_DIR="${TARGET_DIR/#\~/$HOME}"

# Check if directory exists
if [[ ! -d "$TARGET_DIR" ]]; then
    echo -e "${RED}Error: Directory '$TARGET_DIR' does not exist${NC}"
    exit 1
fi

echo -e "${BLUE}Searching for backup files in: $TARGET_DIR${NC}"

# Find backup files with timestamp pattern
backup_files=($(find "$TARGET_DIR" -name "*.backup.[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9]" -type f 2>/dev/null))

if [[ ${#backup_files[@]} -eq 0 ]]; then
    echo -e "${GREEN}No backup files found${NC}"
    exit 0
fi

echo -e "${YELLOW}Found ${#backup_files[@]} backup file(s):${NC}"
for file in "${backup_files[@]}"; do
    # Get file info
    if [[ -f "$file" ]]; then
        file_size=$(du -h "$file" | cut -f1)
        file_date=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$file" 2>/dev/null || stat -c "%y" "$file" 2>/dev/null | cut -d'.' -f1)
        echo -e "  ${file} (${file_size}, ${file_date})"
    fi
done

echo

if [[ "$DRY_RUN" == true ]]; then
    echo -e "${YELLOW}[DRY RUN] Would delete ${#backup_files[@]} backup file(s)${NC}"
    exit 0
fi

# Confirm deletion
read -p "Delete these backup files? [y/N]: " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Cancelled${NC}"
    exit 0
fi

# Delete backup files
deleted_count=0
for file in "${backup_files[@]}"; do
    if [[ -f "$file" ]]; then
        if rm "$file" 2>/dev/null; then
            echo -e "${GREEN}✓${NC} Deleted: $file"
            ((deleted_count++))
        else
            echo -e "${RED}✗${NC} Failed to delete: $file"
        fi
    fi
done

echo
echo -e "${GREEN}Successfully deleted $deleted_count backup file(s)${NC}"